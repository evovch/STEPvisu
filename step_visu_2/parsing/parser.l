%{
#include <stdio.h>
#include "stepentities/cls_Parameter.h"
#include "stepentities/cls_ParameterTreeElement.h"
#include "stepentities/cls_EI.h"
#include "stepentities/cls_SEI.h"
#include "stepentities/cls_CEI.h"
#include "stepentities/cls_EIlist.h"
#include "stepentities/cls_STEPfile.h"
#include "parser.tab.h"  // include header generated by bison from the YACC file
void yyerror (cls_STEPfile*& myStepFile, char*);      // declaration
int yyparse (cls_STEPfile*& myStepFile);        // declaration
// yylex is declared for us by LEX
// yywrap is declared for us by LEX

#ifdef _WIN32
    #define STRDUP(...) _strdup(__VA_ARGS__)
#else
    #define STRDUP(...) strdup(__VA_ARGS__)
#endif

%}

SPACE                   " "
DIGIT                   [0-9]
LOWER                   [a-zа-я]
UPPER                   [A-ZА-Я]|"_"
SPECIAL                 "!"|\"|"*"|"$"|"%"|"&"|"."|"#"|"+"|","|"-"|"("|")"|"?"|"/"|":"|";"|"<"|"="|">"|"@"|"["|"]"|"{"|"|"|"}"|"^"|"`"|"~"
REVERSE_SOLIDUS         "\\"
APOSTROPHE              "'"
CHARACTER               {SPACE}|{DIGIT}|{LOWER}|{UPPER}|{SPECIAL}|{REVERSE_SOLIDUS}|{APOSTROPHE}

SIGN                    "+"|"-"
HEX                     [0-9A-F]
NON_Q_CHAR              {SPECIAL}|{DIGIT}|{SPACE}|{LOWER}|{UPPER}

CONTROL_DIRECTIVE       {PAGE}|{ALPHABET}|{EXTENDED2}|{EXTENDED4}|{ARBITRARY}
PAGE                    {REVERSE_SOLIDUS}"S"{REVERSE_SOLIDUS}{CHARACTER}
ALPHABET                {REVERSE_SOLIDUS}"P"{UPPER}{REVERSE_SOLIDUS}
EXTENDED2               {REVERSE_SOLIDUS}"X2"{REVERSE_SOLIDUS}{HEX_TWO}+{END_EXTENDED}
EXTENDED4               {REVERSE_SOLIDUS}"X4"{REVERSE_SOLIDUS}{HEX_FOUR}+{END_EXTENDED}
END_EXTENDED            {REVERSE_SOLIDUS}"X0"{REVERSE_SOLIDUS}
ARBITRARY               {REVERSE_SOLIDUS}"X"{REVERSE_SOLIDUS}{HEX_ONE}
HEX_ONE                 {HEX}{HEX}
HEX_TWO                 {HEX_ONE}{HEX_ONE}
HEX_FOUR                {HEX_TWO}{HEX_TWO}

RUSLOWER                [\xC0-\xDF]|\xB8
RUSUPPER                [\xE0-\xFF]|\xA8
IN_STR                  {RUSLOWER}|{RUSUPPER}|{NON_Q_CHAR}|{APOSTROPHE}{APOSTROPHE}|{REVERSE_SOLIDUS}{REVERSE_SOLIDUS}|{CONTROL_DIRECTIVE}

%%

"\r\n"                        ;

"ISO-10303-21;"               return FILE_START;
"HEADER"                      return HEADER_START;             
"DATA"                        return DATA_START;
"ENDSEC;"                     return SECTION_END;
"END-ISO-10303-21;"           return FILE_END;

";"                           return SEMICOLON;
"("                           return OP_BR;
")"                           return CL_BR;
"="                           return EQUALS;
","                           return COMMA;
"*"                           return ASTERISK;
"$"                           return DOLLAR;

"!"{UPPER}({UPPER}|{DIGIT})*                       { yylval.sval = STRDUP(yytext); return USER_DEFINED_KEYWORD; }
{UPPER}({UPPER}|{DIGIT})*                          { yylval.sval = STRDUP(yytext); return STANDARD_KEYWORD; }
{SIGN}?{DIGIT}+                                    { yylval.sval = STRDUP(yytext); return INTEGER; }
{SIGN}?{DIGIT}+"."{DIGIT}*("E"{SIGN}?{DIGIT}+)?    { yylval.sval = STRDUP(yytext); return REAL; }
{APOSTROPHE}{IN_STR}*{APOSTROPHE}                  { yylval.sval = STRDUP(yytext); return STRING; }
"#"{DIGIT}+                                        { yylval.sval = STRDUP(yytext); return ENTITY_INSTANCE_NAME; }
"."{UPPER}({UPPER}|{DIGIT})*"."                    { yylval.sval = STRDUP(yytext); return ENUMERATION; }
\"("0"|"1"|"2"|"3"){HEX}*\"                        { yylval.sval = STRDUP(yytext); return BINARY; }

%%

// implementation
void yyerror (cls_STEPfile*& /*myStepFile*/, char* str)
{
    printf ("ERROR: Could not parse: %s\n", str);
}

int yywrap ()
{
    return 1;
}
